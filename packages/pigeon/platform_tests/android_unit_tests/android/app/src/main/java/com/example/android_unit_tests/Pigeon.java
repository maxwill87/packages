// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_unit_tests;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.HashMap;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  public enum LoadingState {
    loading(0),
    complete(1);

    private int index;

    private LoadingState(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NestedRequest {
    private String context;

    public String getContext() {
      return context;
    }

    public void setContext(String setterArg) {
      this.context = setterArg;
    }

    private SetRequest request;

    public SetRequest getRequest() {
      return request;
    }

    public void setRequest(SetRequest setterArg) {
      this.request = setterArg;
    }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("context", context);
      toMapResult.put("request", request.toMap());
      return toMapResult;
    }

    static NestedRequest fromMap(Map<String, Object> map) {
      NestedRequest fromMapResult = new NestedRequest();
      Object context = map.get("context");
      fromMapResult.context = (String) context;
      Object request = map.get("request");
      fromMapResult.request = SetRequest.fromMap((Map) request);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetRequest {
    private Long value;

    public Long getValue() {
      return value;
    }

    public void setValue(Long setterArg) {
      this.value = setterArg;
    }

    private LoadingState state;

    public LoadingState getState() {
      return state;
    }

    public void setState(LoadingState setterArg) {
      this.state = setterArg;
    }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      toMapResult.put("state", state.index);
      return toMapResult;
    }

    static SetRequest fromMap(Map<String, Object> map) {
      SetRequest fromMapResult = new SetRequest();
      Object value = map.get("value");
      fromMapResult.value =
          (value == null) ? null : ((value instanceof Integer) ? (Integer) value : (Long) value);
      Object state = map.get("state");
      fromMapResult.state = LoadingState.values()[(int) state];
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface NestedApi {
    void setValueWithContext(NestedRequest arg);

    /** Sets up an instance of `NestedApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, NestedApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.NestedApi.setValueWithContext",
                new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  @SuppressWarnings("ConstantConditions")
                  NestedRequest input = NestedRequest.fromMap((Map<String, Object>) message);
                  api.setValueWithContext(input);
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface Api {
    void setValue(SetRequest arg);

    /** Sets up an instance of `Api` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, Api api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api.setValue", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  @SuppressWarnings("ConstantConditions")
                  SetRequest input = SetRequest.fromMap((Map<String, Object>) message);
                  api.setValue(input);
                  wrapped.put("result", null);
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
